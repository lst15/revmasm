#[derive(Debug)]
pub enum OPCODE {
    // 0x00 - 0x0b range: arithmetic ops
    STOP = 0x00,
    ADD,
    MUL,
    SUB,
    DIV,
    SDIV,
    MOD,
    SMOD,
    ADDMOD,
    MULMOD,
    EXP,
    SIGNEXTEND = 0x0b,
    // 0x10 - 0x1d range
    LT = 0x10,
    GT,
    SLT,
    SGT,
    EQ,
    ISZERO,
    AND,
    OR,
    XOR,
    NOT,
    BYTE,
    SHL,
    SHR,
    SAR = 0x1d,
    // 0x20
    SHA3 = 0x20,
    // 0x30 - 0x3f range: closure state
    ADDRESS = 0x30,
    BALANCE,
    ORIGIN,
    CALLER,
    CALLVALUE,
    CALLDATALOAD,
    CALLDATASIZE,
    CALLDATACOPY,
    CODESIZE,
    CODECOPY,
    GASPRICE,
    EXTCODESIZE,
    EXTCODECOPY,
    RETURNDATASIZE,
    RETURNDATACOPY,
    EXTCODEHASH = 0x3f,
    // 0x40 - 0x48 range: block operations
    BLOCKHASH = 0x40,
    COINBASE,
    TIMESTAMP,
    NUMBER,
    PREVRANDAO,
    GASLIMIT,
    CHAINID,
    SELFBALANCE,
    BASEFEE = 0x48,
    // 0x50 - 0x5b range: storage and execution
    POP = 0x50,
    MLOAD,
    MSTORE,
    MSTORE8,
    SLOAD,
    SSTORE,
    JUMP,
    JUMPI,
    PC,
    MSIZE,
    GAS,
    JUMPDEST = 0x5b,
    // 0x60 - 0x9f range
    PUSH1 = 0x60,
    PUSH2,
    PUSH3,
    PUSH4,
    PUSH5,
    PUSH6,
    PUSH7,
    PUSH8,
    PUSH9,
    PUSH10,
    PUSH11,
    PUSH12,
    PUSH13,
    PUSH14,
    PUSH15,
    PUSH16,
    PUSH17,
    PUSH18,
    PUSH19,
    PUSH20,
    PUSH21,
    PUSH22,
    PUSH23,
    PUSH24,
    PUSH25,
    PUSH26,
    PUSH27,
    PUSH28,
    PUSH29,
    PUSH30,
    PUSH31,
    PUSH32,
    DUP1,
    DUP2,
    DUP3,
    DUP4,
    DUP5,
    DUP6,
    DUP7,
    DUP8,
    DUP9,
    DUP10,
    DUP11,
    DUP12,
    DUP13,
    DUP14,
    DUP15,
    DUP16,
    SWAP1,
    SWAP2,
    SWAP3,
    SWAP4,
    SWAP5,
    SWAP6,
    SWAP7,
    SWAP8,
    SWAP9,
    SWAP10,
    SWAP11,
    SWAP12,
    SWAP13,
    SWAP14,
    SWAP15,
    SWAP16 = 0x9f,
    // 0xa0 - 0xa4 range
    LOG0 = 0xa0,
    LOG1,
    LOG2,
    LOG3,
    LOG4 = 0xa4,
    // 0xf0 - 0xf5 range: closures
    CREATE = 0xf0,
    CALL,
    CALLCODE,
    RETURN,
    DELEGATECALL,
    CREATE2 = 0xf5,
    // 0xfa
    STATICCALL = 0xfa,
    // 0xfd
    REVERT = 0xfd,
    // 0xfe
    INVALID = 0xfe,
    // 0xff
    SELFDESTRUCT = 0xff,
}

#[derive(Debug)]
pub struct INSTRUCTION {
    pub name: String,
    pub gas: u16,
    pub oprand_bytes: u8,
    pub stack_reads: u8,
    pub stack_writes: u8,
}

impl OPCODE {
    pub fn get_instruction(&self) -> INSTRUCTION {
        match self {
            OPCODE::STOP => INSTRUCTION {
                name: "STOP".to_string(),
                gas: 0,
                oprand_bytes: 0,
                stack_reads: 0,
                stack_writes: 0,
            },
            OPCODE::ADD => INSTRUCTION {
                name: "ADD".to_string(),
                gas: 3,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::MUL => INSTRUCTION {
                name: "MUL".to_string(),
                gas: 5,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::SUB => INSTRUCTION {
                name: "SUB".to_string(),
                gas: 3,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::DIV => INSTRUCTION {
                name: "DIV".to_string(),
                gas: 5,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::SDIV => INSTRUCTION {
                name: "SDIV".to_string(),
                gas: 5,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::MOD => INSTRUCTION {
                name: "MOD".to_string(),
                gas: 5,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::SMOD => INSTRUCTION {
                name: "SMOD".to_string(),
                gas: 5,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::ADDMOD => INSTRUCTION {
                name: "ADDMOD".to_string(),
                gas: 8,
                oprand_bytes: 0,
                stack_reads: 3,
                stack_writes: 1,
            },
            OPCODE::MULMOD => INSTRUCTION {
                name: "MULMOD".to_string(),
                gas: 8,
                oprand_bytes: 0,
                stack_reads: 3,
                stack_writes: 1,
            },
            OPCODE::EXP => INSTRUCTION {
                name: "EXP".to_string(),
                gas: 10,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::SIGNEXTEND => INSTRUCTION {
                name: "SIGNEXTEND".to_string(),
                gas: 5,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::LT => INSTRUCTION {
                name: "LT".to_string(),
                gas: 3,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::GT => INSTRUCTION {
                name: "GT".to_string(),
                gas: 3,
                oprand_bytes: 0,
                stack_reads: 2,
                stack_writes: 1,
            },
            OPCODE::SLT => INSTRUCTION {},
            OPCODE::SGT => INSTRUCTION {},
            OPCODE::EQ => INSTRUCTION {},
            OPCODE::ISZERO => INSTRUCTION {},
            OPCODE::AND => INSTRUCTION {},
            OPCODE::OR => INSTRUCTION {},
            OPCODE::XOR => INSTRUCTION {},
            OPCODE::NOT => INSTRUCTION {},
            OPCODE::BYTE => INSTRUCTION {},
            OPCODE::SHL => INSTRUCTION {},
            OPCODE::SHR => INSTRUCTION {},
            OPCODE::SAR => INSTRUCTION {},
            OPCODE::SHA3 => INSTRUCTION {},
            OPCODE::ADDRESS => INSTRUCTION {},
            OPCODE::BALANCE => INSTRUCTION {},
            OPCODE::ORIGIN => INSTRUCTION {},
            OPCODE::CALLER => INSTRUCTION {},
            OPCODE::CALLVALUE => INSTRUCTION {},
            OPCODE::CALLDATALOAD => INSTRUCTION {},
            OPCODE::CALLDATASIZE => INSTRUCTION {},
            OPCODE::CALLDATACOPY => INSTRUCTION {},
            OPCODE::CODESIZE => INSTRUCTION {},
            OPCODE::CODECOPY => INSTRUCTION {},
            OPCODE::GASPRICE => INSTRUCTION {},
            OPCODE::EXTCODESIZE => INSTRUCTION {},
            OPCODE::EXTCODECOPY => INSTRUCTION {},
            OPCODE::RETURNDATASIZE => INSTRUCTION {},
            OPCODE::RETURNDATACOPY => INSTRUCTION {},
            OPCODE::EXTCODEHASH => INSTRUCTION {},
            OPCODE::BLOCKHASH => INSTRUCTION {},
            OPCODE::COINBASE => INSTRUCTION {},
            OPCODE::TIMESTAMP => INSTRUCTION {},
            OPCODE::NUMBER => INSTRUCTION {},
            OPCODE::PREVRANDAO => INSTRUCTION {},
            OPCODE::GASLIMIT => INSTRUCTION {},
            OPCODE::CHAINID => INSTRUCTION {},
            OPCODE::SELFBALANCE => INSTRUCTION {},
            OPCODE::BASEFEE => INSTRUCTION {},
            OPCODE::POP => INSTRUCTION {},
            OPCODE::MLOAD => INSTRUCTION {},
            OPCODE::MSTORE => INSTRUCTION {},
            OPCODE::MSTORE8 => INSTRUCTION {},
            OPCODE::SLOAD => INSTRUCTION {},
            OPCODE::SSTORE => INSTRUCTION {},
            OPCODE::JUMP => INSTRUCTION {},
            OPCODE::JUMPI => INSTRUCTION {},
            OPCODE::PC => INSTRUCTION {},
            OPCODE::MSIZE => INSTRUCTION {},
            OPCODE::GAS => INSTRUCTION {},
            OPCODE::JUMPDEST => INSTRUCTION {},

            OPCODE::PUSH1 => INSTRUCTION {
                name: "PUSH1".to_string(),
                gas: 3,
                oprand_bytes: 1,
                stack_reads: 0,
                stack_writes: 1,
            },
            OPCODE::PUSH2 => INSTRUCTION {
                name: "PUSH2".to_string(),
                gas: 3,
                oprand_bytes: 2,
                stack_reads: 0,
                stack_writes: 1,
            },
            OPCODE::PUSH3 => INSTRUCTION {},
            OPCODE::PUSH4 => INSTRUCTION {},
            OPCODE::PUSH5 => INSTRUCTION {},
            OPCODE::PUSH6 => INSTRUCTION {},
            OPCODE::PUSH7 => INSTRUCTION {},
            OPCODE::PUSH8 => INSTRUCTION {},
            OPCODE::PUSH9 => INSTRUCTION {},
            OPCODE::PUSH10 => INSTRUCTION {},
            OPCODE::PUSH11 => INSTRUCTION {},
            OPCODE::PUSH12 => INSTRUCTION {},
            OPCODE::PUSH13 => INSTRUCTION {},
            OPCODE::PUSH14 => INSTRUCTION {},
            OPCODE::PUSH15 => INSTRUCTION {},
            OPCODE::PUSH16 => INSTRUCTION {},
            OPCODE::PUSH17 => INSTRUCTION {},
            OPCODE::PUSH18 => INSTRUCTION {},
            OPCODE::PUSH19 => INSTRUCTION {},
            OPCODE::PUSH20 => INSTRUCTION {},
            OPCODE::PUSH21 => INSTRUCTION {},
            OPCODE::PUSH22 => INSTRUCTION {},
            OPCODE::PUSH23 => INSTRUCTION {},
            OPCODE::PUSH24 => INSTRUCTION {},
            OPCODE::PUSH25 => INSTRUCTION {},
            OPCODE::PUSH26 => INSTRUCTION {},
            OPCODE::PUSH27 => INSTRUCTION {},
            OPCODE::PUSH28 => INSTRUCTION {},
            OPCODE::PUSH29 => INSTRUCTION {},
            OPCODE::PUSH30 => INSTRUCTION {},
            OPCODE::PUSH31 => INSTRUCTION {},
            OPCODE::PUSH32 => INSTRUCTION {},
            OPCODE::DUP1 => INSTRUCTION {},
            OPCODE::DUP2 => INSTRUCTION {},
            OPCODE::DUP3 => INSTRUCTION {},
            OPCODE::DUP4 => INSTRUCTION {},
            OPCODE::DUP5 => INSTRUCTION {},
            OPCODE::DUP6 => INSTRUCTION {},
            OPCODE::DUP7 => INSTRUCTION {},
            OPCODE::DUP8 => INSTRUCTION {},
            OPCODE::DUP9 => INSTRUCTION {},
            OPCODE::DUP10 => INSTRUCTION {},
            OPCODE::DUP11 => INSTRUCTION {},
            OPCODE::DUP12 => INSTRUCTION {},
            OPCODE::DUP13 => INSTRUCTION {},
            OPCODE::DUP14 => INSTRUCTION {},
            OPCODE::DUP15 => INSTRUCTION {},
            OPCODE::DUP16 => INSTRUCTION {},
            OPCODE::SWAP1 => INSTRUCTION {},
            OPCODE::SWAP2 => INSTRUCTION {},
            OPCODE::SWAP3 => INSTRUCTION {},
            OPCODE::SWAP4 => INSTRUCTION {},
            OPCODE::SWAP5 => INSTRUCTION {},
            OPCODE::SWAP6 => INSTRUCTION {},
            OPCODE::SWAP7 => INSTRUCTION {},
            OPCODE::SWAP8 => INSTRUCTION {},
            OPCODE::SWAP9 => INSTRUCTION {},
            OPCODE::SWAP10 => INSTRUCTION {},
            OPCODE::SWAP11 => INSTRUCTION {},
            OPCODE::SWAP12 => INSTRUCTION {},
            OPCODE::SWAP13 => INSTRUCTION {},
            OPCODE::SWAP14 => INSTRUCTION {},
            OPCODE::SWAP15 => INSTRUCTION {},
            OPCODE::SWAP16 => INSTRUCTION {},

            OPCODE::LOG0 => INSTRUCTION {},
            OPCODE::LOG1 => INSTRUCTION {},
            OPCODE::LOG2 => INSTRUCTION {},
            OPCODE::LOG3 => INSTRUCTION {},
            OPCODE::LOG4 => INSTRUCTION {},

            OPCODE::CREATE => INSTRUCTION {},
            OPCODE::CALL => INSTRUCTION {},
            OPCODE::CALLCODE => INSTRUCTION {},
            OPCODE::RETURN => INSTRUCTION {},
            OPCODE::DELEGATECALL => INSTRUCTION {},
            OPCODE::CREATE2 => INSTRUCTION {},
            OPCODE::STATICCALL => INSTRUCTION {},
            OPCODE::REVERT => INSTRUCTION {},
            OPCODE::INVALID => INSTRUCTION {},
            OPCODE::SELFDESTRUCT => INSTRUCTION {},
            _ => INSTRUCTION {
                name: "Unknown".to_string(),
                gas: 0,
                oprand_bytes: 0,
                stack_reads: 0,
                stack_writes: 0,
            },
        }
    }
}
